package main

/*
#include <stdint.h>
typedef const char* string;
*/
import "C"
import (
	"math/big"
)

//export Verify
func Verify(flag C.string) C.int {
	if verify(C.GoString(flag)) {
		return 1
	} else {
		return 0
	}
}

var mod = [...]byte{117, 116, 115, 115, 38, 113, 114, 112, 116, 117, 39, 115, 116, 112, 122, 35, 33, 39, 116, 112, 32, 119, 119, 35, 35, 113, 39, 33, 39, 32, 33, 33, 32, 36, 112, 116, 36, 32, 32, 113, 39, 118, 118, 39, 122, 113, 113, 35, 115, 115, 113, 36, 114, 35, 113, 112, 113, 33, 36, 112, 122, 32, 122, 112, 116, 118, 119, 114, 122, 118, 123, 32, 113, 119, 122, 39, 32, 118, 38, 112, 114, 36, 36, 114, 117, 116, 35, 33, 114, 113, 113, 119, 33, 117, 123, 36, 39, 123, 36, 112, 113, 35, 123, 122, 32, 122, 123, 122, 119, 123, 122, 35, 116, 39, 123, 35, 35, 32, 33, 33, 32, 33, 35, 39, 117, 38, 36, 32, 119, 118, 32, 114, 32, 114, 123, 115, 117, 33, 113, 38, 114, 32, 32, 117, 39, 118, 114, 118, 113, 113, 113, 123, 118, 38, 113, 33, 32, 115, 113, 116, 118, 32, 36, 118, 33, 39, 39, 119, 35, 33, 117, 122, 123, 119, 112, 117, 123, 36, 114, 123, 123, 115, 39, 33, 114, 35, 112, 32, 115, 119, 112, 114, 39, 122, 117, 36, 123, 32, 117, 123, 39, 118, 39, 39, 112, 113, 115, 122, 39, 119, 39, 112, 118, 35, 114, 39, 39, 114, 35, 33, 36, 116, 123, 119, 118, 119, 122, 112, 118, 123, 118, 38, 39, 113, 33, 118, 36, 119, 119, 38, 123, 118, 38, 112, 116, 112, 123, 122, 113, 38, 33, 122, 38, 33, 117, 116, 115, 113, 32, 39, 113, 115, 39, 112, 123, 32, 119, 33, 36, 36, 35, 33, 39, 35, 38, 36, 123, 115, 122, 35, 32, 122, 119, 118, 33, 118, 119, 122, 33, 119, 113, 118, 35, 119, 33, 116, 123, 116, 119, 112, 114, 119, 35, 112, 39, 113, 112, 118, 122, 112, 36, 39, 113, 123, 117, 115, 39, 117, 115, 116, 122, 123, 114, 122, 38, 38, 116, 117, 39, 112, 115, 116, 122, 33, 123, 119, 35, 114, 115, 118, 116, 115, 33, 113, 113, 112, 116, 38, 113, 39, 117, 112, 115, 123, 116, 119, 39, 112, 119, 119, 39, 118, 112, 32, 117, 117, 39, 32, 116, 112, 35, 38, 115, 122, 114, 118, 38, 113, 113, 123, 123, 122, 113, 123, 119, 114, 123, 116, 114, 36, 39, 33, 35, 38, 35, 122, 32, 117, 119, 113, 114, 112, 117, 36, 118, 38, 116, 38, 39, 36, 117, 39, 38, 114, 35, 116, 35, 33, 116, 113, 36, 35, 36, 113, 122, 32, 33, 123, 118, 33, 112, 122, 115, 115, 114, 38, 36, 118, 119, 38, 113, 122, 33, 32, 116, 35, 32, 117, 113, 39, 117, 33, 38, 35, 39, 114, 38, 32, 119, 32, 123, 119, 112, 117, 39, 116, 115, 114, 118, 113, 39, 39, 123, 114, 36, 123, 122, 122, 112, 122, 112, 122, 118, 118, 119, 119, 32, 39, 114, 122, 32, 123, 116, 35, 119, 35, 36, 112, 33, 38, 117, 33, 117, 39, 114, 117, 36, 32, 39, 33, 118, 117, 38, 122, 117}

func verify(flag string) bool {
	x := encrypt(flag)
	y := new(big.Int)
	y.SetString("3d3bf6a24cd9b15a0987b00d76cacc1dc0baa2475bdac66193a6a9bcf6724c73f18600d5b305a8fddf546a0b329cda53f56f5feb68972709245adda110cb361767a0240095b24bdfe9d03d0832949599eec09c8dd78fce124f7ea1fa5a4433ccb975b0d43d72cc47f9fb773b8ed2a72f783bf1aed89bd7b91348be90174814552cca625c827e218fa531415e071236ee52aab3103c282dd9b335bea6d57a9b3f35842141f554ff53bb40b0f4db857211127affce1e8dc88edc8349ec1fba2572a789a36b8fc7db39e9c7d378ea48061c6cb5f14162ce387bbb6f9b43debad489fa106ca0a296cf88454500a42fadf150c7df7c285c83f247f81c818e90f25eddf9", 16)
	return x.Cmp(y) == 0
}

func encrypt(plaintext string) big.Int {
	n := new(big.Int)
	decryptMod()
	n.SetString(string(mod[:]), 16)
	// n.SetString("7611d30267e1628ace62b55aa3ecebccbf26fbb3e44e833a113f0a323cf28b826450849b358eb4d20ff076ac0335c79fe9f23a98b898598a6e9aabccbcae7dfb54b0b0917c3d0bb7e40433394d3cb1364bf4cee5ac7895279f0991ec0a2b1520e87f9b79e4ee2318e5e24a0ee0acf6954582494de3c4f55d94d262983dc8dc7613be31e29b5cffaceadf918ab854c458c534a5c6965205a2e32482fe3971e7168908dd67e2168c95a01461c3326d3e721965e255e42b77eb62ad1804d339983950960fecada8b753027f4d6def7ed0a6ac63faf38bc94c28110df45d38cb6ab73e7cdae0db5b9527e61043ee90f98828284455be08b96a5af2cd7c7e07fbec47d87", 16)
	m := bytesToLong([]byte(plaintext))
	c := new(big.Int)
	c.Exp(&m, big.NewInt(65537), n)
	return *c
}

func decryptMod() {
	for i, b := range mod {
		mod[i] = b ^ 0x42
	}
}

func bytesToLong(bytes []byte) big.Int {
	x := big.NewInt(0)

	for _, b := range bytes {
		x.Mul(x, big.NewInt(256))
		x.Add(x, big.NewInt(int64(b)))
	}

	return *x
}

func main() {}